/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

ext {
    supportLibraryVersion = '28.0.0-alpha3'
    grpcVersion = '1.4.0'
}

def releaseTime() {
 // return new Date().format("yyyy-MM-dd_HH-mm-ss", TimeZone.getTimeZone("Asia/Chongqing"))
     return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("Asia/Chongqing"))
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.2'

    defaultConfig {
        applicationId "com.uni.cloud.lang"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName '1.2'
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        release {
            storeFile file(project.properties.storeFile)
            storePassword project.properties.storePassword
            keyAlias project.properties.keyAlias
            keyPassword project.properties.keyPassword
        }
        config {
            storeFile file('F:/liwenbin/pos/spos.jks')
            keyAlias 'spos'
            keyPassword 'unitone@2018'
            storePassword 'unitone@2018'
        }
    }

    productFlavors {
        dev {
            // Minimum version with platform multi-dex support
            minSdkVersion 19
        }
        prod {
            // Minimum version that can run gRPC (TLS extension)
            minSdkVersion 16
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            multiDexEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
        resolutionStrategy.force "com.android.support:support-annotations:$supportLibraryVersion"
    }

    useLibrary 'org.apache.http.legacy'

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //这里修改apk文件名
                output.outputFile = new File(output.outputFile.parent, "uSpeech-" + buildType.name + "-"+releaseTime()+ "-v" +
                        defaultConfig.versionName + "-" + defaultConfig.versionCode + ".apk" );
            }
        }
    }

}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.3.0'
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    compile files('libs/Msc.jar')
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // Support libraries
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"

    // gRPC
    compile "io.grpc:grpc-okhttp:$grpcVersion"
    compile "io.grpc:grpc-protobuf-lite:$grpcVersion"
    compile "io.grpc:grpc-stub:$grpcVersion"
    compile 'javax.annotation:javax.annotation-api:1.2'
    protobuf 'com.google.protobuf:protobuf-java:3.3.1'

    //        compile ('com.google.cloud:google-cloud-texttospeech:0.51.0-beta') {

    //        exclude group: 'io.grpc', module: 'grpc-all'

    //        exclude group: 'com.google.protobuf', module: 'protobuf-java'

    //        exclude group: 'com.google.api-client', module: 'google-api-client-appengine'

    //    }

    // OAuth2 for Google API
    compile('com.google.auth:google-auth-library-oauth2-http:0.7.0') {
        exclude module: 'httpclient'
    }

    //    compile ('com.google.apis:google-api-services-translate:v2-rev47-1.22.0') {

    //        exclude group: 'com.google.guava'

    //    }

    //    compile ('com.google.cloud:google-cloud-translate:0.5.0') {

    //        exclude group: 'io.grpc', module: 'grpc-all'

    //        exclude group: 'com.google.protobuf', module: 'protobuf-java'

    //        exclude group: 'com.google.api-client', module: 'google-api-client-appengine'

    //    }

    // Tests
    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
}

task copySecretKey(type: Copy) {
    def File secretKey = file "$System.env.GOOGLE_APPLICATION_CREDENTIALS"
    from secretKey.getParent()
    include secretKey.getName()
    into 'src/main/res/raw'
    rename secretKey.getName(), "credential.json"
}

preBuild.dependsOn(copySecretKey)

